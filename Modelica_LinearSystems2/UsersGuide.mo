within Modelica_LinearSystems2;
package UsersGuide "User's Guide"
  extends Modelica.Icons.Information;

  class GettingStarted "Getting started"
    extends Modelica.Icons.Information;

    class ComplexNumbers "Complex numbers"
      extends Modelica.Icons.Information;

      annotation (Documentation(info="<html>
<p>
Within the Modelica_LinearSystems2 Library the operator record <strong>Complex</strong>
is widely used. This record was introduced together with Modelica Standard
Library&nbsp;3.2 as a&nbsp;top-level record outside of the Modelica Library.
Introducing this record, a&nbsp;complex number, e.g. c&nbsp;=&nbsp;1&nbsp;+&nbsp;2*j,
can be simply generated by the following declaration:
</p>
<blockquote><pre>
c = Complex(1, 2)
</pre></blockquote>
<p>
Since support of operation overloading has been enabled in the Modelica language,
the record Complex also enables mathematical operations being applied
on complex numbers.
The principle is that if there is e.g. an operation &quot;c1&nbsp;+&nbsp;c2&quot;
for which the operation '+' is not defined, it will be determined whether
&quot;c1&quot; is a&nbsp;record type and, if it is, whether it contains
a&nbsp;function '+'. If applicable, this function call then replaces the above
operation, i.e,. &quot;c1&nbsp;+&nbsp;c2&quot; is interpreted as
Complex.'+'(c1,&nbsp;c2). In other words, an operation like
c3&nbsp;=&nbsp;c1&nbsp;+&nbsp;c2 can now be realized by
</p>
<blockquote><pre>
import Modelica.ComplexMath.j; // same as constant Complex j = Complex(0,1);
Complex c1 = 1 + 3*j;    // = Complex.'+'(Complex(1), Complex.'*'(Complex(3),j));
Complex c2 = 1 - 5*j;
Complex c3 = c1 + c2;
Complex c4 = c1 * c2;
</pre></blockquote>
<p>
and
</p>
<blockquote><pre>
Modelica.Utilities.Streams.print(&quot;c3 = &quot; + String(c3));
Modelica.Utilities.Streams.print(&quot;c4 = &quot; + String(c4));
</pre></blockquote>
<p>
results in
</p>
<blockquote><pre>
c3 = 2 - 2*j
c4 = 16 - 2*j
</pre></blockquote>
<p>
For details see
<a href=\"https://www.modelica.org/documents/ModelicaSpec34.pdf\">Modelica Language Specification version 3.4</a>, Chapter 14.
</p>
<p>
Besides the basic arithmetics given in Complex record, further mathematical
operations on complex numbers can be found in
<a href=\"modelica://Modelica.ComplexMath\">Modelica.ComplexMath</a>. Some advanced
functions, especially those concerning vectors and matrices of complex
numbers, are collected in
<a href=\"modelica://Modelica_LinearSystems2.ComplexMathAdds\">ComplexMathAdds</a>.
</html>"));
    end ComplexNumbers;

    class Polynomials "Polynomials"
      extends Modelica.Icons.Information;

      annotation (Documentation(info="<html>
<p>
Polynomials with real coefficients are defined via record
<a href=\"modelica://Modelica_LinearSystems2.Math.Polynomial\">Modelica_LinearSystems2.Math.Polynomial</a>.
Read first the previous section about
Complex numbers to understand how records, functions in records and the coming
operator overloading technique works. The Polynomial record is equivalent to
the Complex record. A&nbsp;screenshot is shown in the next figure:
</p>
<div>
<img src=\"modelica://Modelica_LinearSystems2/Resources/Images/UsersGuide/Polynomial1.png\"/>
</div>
<p>
A&nbsp;Polynomial is constructed by the command <code>Polynomial(coefficientVector)</code>, where
the input argument provides the polynomial coefficients in descending order.
In the following figure, a&nbsp;typical session in the command window is shown
(try it, e.g., in Dymola command window):
</p>

<blockquote><pre>
<strong>import</strong> Modelica_LinearSystems2.Math.Polynomial
// = true

x = Polynomial.x()
p1 = -6*x^2 + 4*x -3
p1
// -6*x^2 + 4*x - 3
String(p1)
//  = \"-6*x^2 + 4*x - 3\"

int_p = Polynomial.integral(p1)
String(int_p)
//  = \"-2*x^3 + 2*x^2 - 3*x\"

p2 = 3*p1
p3 = p2+p1
p3
// -24*x^2 + 16*x - 12

r = Polynomial.roots(p3, printRoots=true)
//  =
//    0.333333 + 0.62361*j
//    0.333333 - 0.62361*j

der_p = Polynomial.derivative(p1)
String(der_p)
//  = \"-12*x + 4\"

Polynomial.evaluate(der_p, 1)
//  = -8.0
</pre></blockquote>

<p>
After defining the import statement to get Polynomial as an abbreviation for
Modelica_LinearSystems2.Math.Polynomial, the coefficients are given as vector input
to <code>Polynomial()</code>. Via the operator-'String' function (called by <code>String(p)</code>)
polynomial <code>p</code> is pretty printed. Besides all elementary operations, such as
operator <code>'+'</code> or <code>'*'</code>, functions to compute the integral or
the derivative are provided.
With function <code>evaluate(..)</code> the Polynomial is evaluated for a&nbsp;given
value&nbsp;<var>x</var>.
With function <code>roots</code>, the roots of the Polynomial are evaluated and are returned
as a&nbsp;vector of complex numbers. If the optional second input argument <code>printRoots</code>
is set to true, the roots are at once also nicely printed.
</p>
<p>
With function <code>fitting()</code>, a&nbsp;polynomial can be determined that
approximates given table values.
Finally with function <code>plot()</code>, the interesting range of&nbsp;<var>x</var> is
automatically determined (via calculating the roots of the polynomial and of its
derivative) and plotted. A&nbsp;typical plot is shown in the next figure:
</p>
<div>
<img src=\"modelica://Modelica_LinearSystems2/Resources/Images/UsersGuide/Polynomial3.png\"/>
</div>
<p>
Several other examples of Polynomial are available in
<a href=\"modelica://Modelica_LinearSystems2.Math.Polynomial.Examples\">Polynomial.Examples</a>.
In Dymola, select the function with the right mouse button and click \"Ok\" on
the resulting menu which provides the possibility to define all the input arguments.
Since the Examples function do not have any input arguments, only the \"Ok\"
button is present:
</p>
<div>
<img src=\"modelica://Modelica_LinearSystems2/Resources/Images/UsersGuide/Polynomial4.png\"/>
</div>
</html>"));
    end Polynomials;

    class LinearSystemDataStructures "Linear system data structures"
      extends Modelica.Icons.Information;

      annotation (Documentation(info="<html>
<p>
At the top level of the Modelica_LinearSystems2 library,
data structures are provided as Modelica
records defining different representations of
linear, time invariant differential and difference
equation systems. In the record definitions,
functions are provided that operate on the
corresponding data structure. Currently, the following
linear system representations are available:
</p>
<table border=\"1\" cellspacing=\"0\" cellpadding=\"2\">
  <caption align=\"bottom\">Various linear system representations</caption>
  <tr>
    <th>Representation</th>
    <th>Description</th>
  </tr>
  <tr>
    <td> record&nbsp;<a href=\"modelica://Modelica_LinearSystems2.StateSpace\">StateSpace</a></td>
    <td> Multi input, multi output, linear differential equation systems in state space form:
<blockquote><pre>
<strong>der</strong>(<strong>x</strong>) = <strong>A</strong> * <strong>x</strong> + <strong>B</strong> * <strong>u</strong>
    <strong>y</strong>  = <strong>C</strong> * <strong>x</strong> + <strong>D</strong> * <strong>u</strong>

</pre></blockquote>
    </td>
  </tr>
  <tr>
    <td> record&nbsp;<a href=\"modelica://Modelica_LinearSystems2.TransferFunction\">TransferFunction</a></td>
    <td> Single input, single output, transfer functions defined via a&nbsp;numerator
         and a&nbsp;denominator polynomial n(s) and d(s) respectively:
<blockquote><pre>
     n(s)                                2*s+3
y = ------ * u,  for example:   y = ----------------- * u
     d(s)                            4*s^2 + 5*s + 6

</pre></blockquote>
    </td>
  </tr>
  <tr>
    <td> record&nbsp;<a href=\"modelica://Modelica_LinearSystems2.ZerosAndPoles\">ZerosAndPoles</a></td>
    <td> Single input, single output, transfer function defined via the products of
           its zeros z and poles p, respectively;
<blockquote><pre>
       product(s - z[i])
y = k*------------------- * u
       product(s - p[i])

</pre></blockquote>

A&nbsp;description with zeros and poles is problematic: For example,
a&nbsp;small change in the imaginary part of a&nbsp;conjugate complex pole pair,
leads no longer to a&nbsp;transfer function with real coefficients.
If the same zero or pole is present twice or more, then a&nbsp;diagonal state space
form is no longer possible. This means that the structure is
very sensitive if zeros or poles are close together.
For this and other reasons, internally, this data structure
stores the zeros and poles as first and second order
polynomials with real coefficients:
<blockquote><pre>
       product(s+n1[i]) * product(s^2+n2[i,1]*s+n2[i,2])
y = k*---------------------------------------------------
       product(s+d1[i]) * product(s^2+d2[i,1]*s+d2[i,2])

</pre></blockquote>
    </td>
  </tr>
  <tr>
    <td> record&nbsp;<a href=\"modelica://Modelica_LinearSystems2.DiscreteStateSpace\">DiscreteStateSpace</a></td>
    <td> Multi input, multi output, linear difference equation system
          in state space form:
<blockquote><pre>
<strong>x</strong>(Ts*(k+1)) = <strong>A</strong> * <strong>x</strong>(Ts*k) + <strong>B</strong> * <strong>u</strong>(Ts*k)
<strong>y</strong>(Ts*k)     = <strong>C</strong> * <strong>x</strong>(Ts*k) + <strong>D</strong> * <strong>u</strong>(Ts*k)
<strong>x</strong>_continuous(Ts*k) = <strong>x</strong>(Ts*k) + <strong>B2</strong> * <strong>u</strong>(Ts*k)

</pre></blockquote>
with <code>Ts</code> the sample time and <code>k</code>
the index of the actual sample instance (k=0,1,2,3,...).
<strong>x</strong>(t) is the discrete state vector and <strong>x</strong>_continuous(t)
is the state vector of the continuous system from which the
discrete block has been derived by a&nbsp;state transformation,
in order to remove dependencies of past values of <strong>u</strong>.<br>
    </td>
  </tr>
<!--
  <tr>
    <td>record&nbsp;<a href=\"modelica://Modelica_LinearSystems2.DiscreteZerosAndPoles\">DiscreteZerosAndPoles</a></td>
    <td></td>
  </tr>
  <tr>
    <td>record&nbsp;<a href=\"modelica://Modelica_LinearSystems2.DiscreteTransferFunction\">DiscreteTransferFunction</a></td>
    <td></td>
  </tr>
-->
</table>

<p>
It is planned to add linear system descriptions such as
DiscreteFactorized, FrequencyResponse, and DiscreteFrequencyResponse,
in the future. Furthermore, several useful functions are not yet
available in the records above. They will also be added in the future.
</p>

<p>
Below, a&nbsp;typical session in the command window is shown:
</p>

<blockquote><pre>
<strong>import</strong> Modelica_LinearSystems2.TransferFunction
//  = true
<strong>import</strong> Modelica_LinearSystems2.ZerosAndPoles
//  = true

s = TransferFunction.s()
p = ZerosAndPoles.p()

tf1 = (s + 2)/(2*s^2 + 3*s +4)
String(tf1)
//  = \"(s + 2)/(2*s^2 + 3*s + 4)\"

zp1 = 4*(p + 1)/((p - 1)*(p^2 - 4*p + 13))
String(zp1)
//  = \"4*(p + 1) / ( (p - 1)*(p^2 - 4*p + 13) )\"

tf2 = ZerosAndPoles.Conversion.toTransferFunction(zp1)
tf2
// (4*s + 4)/(s^3 - 5*s^2 + 17*s - 13)

tf3 = tf1*tf2
tf3
// (4*s^2 + 12*s + 8)/(2*s^5 - 7*s^4 + 23*s^3 + 5*s^2 + 29*s - 52)

TransferFunction.Plot.bode(tf3)
</pre></blockquote>

<p>
The last command (<code>Plot.bode</code>) results in the following frequency response:
</p>

<div>
<img src=\"modelica://Modelica_LinearSystems2/Resources/Images/UsersGuide/TransferFunction2.png\">
</div>

<p>
Note, the interesting frequency range is automatically determined
(it can be fairly good deduced from the phase information of
poles and zeros).
</p>

<p>
Transfer function <code>tf3</code> can be transformed into a&nbsp;state
space description with command
<code>ss&nbsp;= StateSpace(tf3)</code> and a&nbsp;poles-and-zeros plot and
print out is then available via <code>StateSpace.Plot.polesAndZeros(ss)</code>.
</p>

<blockquote><pre>
<strong>import</strong> Modelica_LinearSystems2.StateSpace
//  = true

ss = StateSpace(tf3)
StateSpace.Plot.polesAndZeros(ss)
</pre></blockquote>

<p>
resulting in:
</p>

<div>
<img src=\"modelica://Modelica_LinearSystems2/Resources/Images/UsersGuide/TransferFunction3.png\">
</div>

<p>
It is also possible to linearize any Modelica model at
the start time (after initialization has been performed).
This is especially useful if the model is initialized in
steady state. For example, the command
<code>StateSpace.Import.fromModel(&quot;xxx&quot;)</code> results in:
</p>


<blockquote><pre>
ss2 = StateSpace.Import.fromModel(\"Modelica.Mechanics.Rotational.Examples.First\")
ev = StateSpace.Analysis.eigenValues(ss2)
ev
// {-0.0595186 + 76.3757*j, -0.0595186 - 76.3757*j, -0.714296, 3.0963e-17}
</pre></blockquote>

<p>
Also several
<a href=\"modelica://Modelica_LinearSystems2.ZerosAndPoles.Design.filter\">filters</a>
are provided in. Typical frequency responses of implemented filters
are shown in the next figure:
</p>

<div>
<img src=\"modelica://Modelica_LinearSystems2/Resources/Images/LowPassOrder4Filters.png\">
</div>

<p>
The step responses of the same low pass filters are shown in the next figure,
starting from a&nbsp;steady state initial filter with initial input equal to&nbsp;0.2:
</p>

<div>
<img src=\"modelica://Modelica_LinearSystems2/Resources/Images/LowPassOrder4FiltersStepResponse.png\">
</div>
</html>"));
    end LinearSystemDataStructures;

    annotation (Documentation(info="<html>
<p>
In this section, a first introduction to the Modelica_LinearSystems2
library is given at hand of several examples.
The library consists of four main parts that
are described in the following sections:
</p>
<ol>
<li> Section <a href=\"modelica://Modelica_LinearSystems2.UsersGuide.GettingStarted.ComplexNumbers\">Complex numbers</a>
     introduces the Modelica_LinearSystems2.Math.Complex record that provides a
     data struture for Complex numbers and arrays and also the most
     important (scalar) operations on them. Read this section first,
     because the structuring of records as well as operator overloading
     is explained that is also the basis for the other parts of the
     library.</li>

<li> Section <a href=\"modelica://Modelica_LinearSystems2.UsersGuide.GettingStarted.Polynomials\">Polynomials</a>
     describes the Modelica_LinearSystems2.Math.Polynomials record that
     provides a data structure for Polynomials with real coefficients
     and operations such as evaluation, fitting, integration.
     The Complex and Polynomial data structures are basic
     building blocks for the other parts of the library.</li>

<li> <a href=\"modelica://Modelica_LinearSystems2.UsersGuide.GettingStarted.LinearSystemDataStructures\">Linear system data structures</a>
     are records on the top level of Modelica_LinearSystems2 that define
     data structures for different representations of
     linear, time invariant, continuous and discrete systems,
     e.g., record StateSpace. Furthermore, operations are provided
     on these data structures, e.g., to connect linear systems together
     or plot a frequency response.</li>

</ol>
</html>"));
  end GettingStarted;

  class Requirements "Requirements"
    extends Modelica.Icons.Information;

    annotation (Documentation(info="<html>
<p>
This library is implemented with Modelica 4.0.0 (especially the
operator overloading features are utilized).
Furthermore, linearization and plotting is implemented
with Dymola API calls. It is planned to move these tool specific calls to the
<a href=\"modelica://ModelicaServices\">ModelicaServices</a> package
(introduced for the Modelica Standard Library 3.1 for these
purposes), in order that other Modelica tools can provide the same functionality in a clean way.
</p>
</html>"));
  end Requirements;

  class The3clauseBSDLicense "3-clause BSD License"
    extends Modelica.Icons.Information;

    annotation (Documentation(info="<html>
<p>All files in this directory (Modelica_LinearSystems2) and in all
subdirectories, especially all files that build package \"Modelica_LinearSystems2\" and all
files in \"Modelica_LinearSystems2/Resources/\" and \"Modelica_LinearSystems2/help/\"
are licensed by <strong><u>DLR</u></strong> under the
<strong><u>3-Clause BSD License</u></strong>.</p>

<h4>Licensor</h4>
<p>
<a href=\"https://www.dlr.de/sr/en\">Deutsches Zentrum f&uuml;r Luft- und Raumfahrt (DLR)</a><br>
Institut f&uuml;r Systemdynamik und Regelungstechnik (SR)<br>
M&uuml;nchener Straße 20<br>
D-82234 We&szlig;ling<br>
Germany<br>
email: <a href=\"mailto:Martin.Otter@dlr.de\">Martin.Otter@dlr.de</a>
</p>

<!--
<p>
<a href=\"#3clauseBSD_License-outline\">3-clause BSD License</a><br>
<a href=\"#Frequently_Asked_Questions-outline\">Frequently Asked Questions</a><br>
</p>

<hr>
-->

<h4><a name=\"3clauseBSD_License-outline\"></a>The 3-clause BSD License</h4>
<p>
Copyright 
<br>&copy; 2005-2012, DLR Institute of Robotics and Mechatronics
<br>&copy; 2012-2020, DLR Institute of System Dynamics and Control.
<br>All rights reserved.
</p>
<p>
Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
</p>
<p>
1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
</p>
<p>
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.
</p>
<p>
3. Neither the name of the copyright holder nor the names of its contributors may
be used to endorse or promote products derived from this software without specific
prior written permission.
</p>
<p>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
</p>
---
<p>
The above is the license, and is the standard
<a href=\"https://opensource.org/licenses/BSD-3-Clause\">3-clause BSD-license</a>
with DLR Institute of System Dynamics and Control as copyright holder.
</p>
</html>"));

  end The3clauseBSDLicense;

  class Literature "References"
    extends Modelica.Icons.References;

    annotation (Documentation(info="<html>
<p>
This library is based on the following references:
</p>
<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
    <tr>
      <td valign=\"top\">[Astroem1997]</td>
      <td valign=\"top\">K.J. Astr&ouml;m and B. Wittenmark,
        <em>Computer Controlled Systems: Theory and Design</em>,
        Prentice Hall, 3rd edition, ISBN 978-0133148992, 1997.</td>
    </tr>
    <tr>
      <td valign=\"top\">[Datta2004]</td>
      <td valign=\"top\">B.N. Datta,
        <em>Numerical Methods for Linear Control Systems</em>,
        Elsevier Academic Press, ISBN:978-0122035906, 2004.</td>
    </tr>
    <tr>
      <td valign=\"top\">[Golub1996]</td>
      <td valign=\"top\">G.H. Golub and C.F. Van Loan,
        <em>Matrix Computations</em>,
        Johns Hopkins University Press, 3rd edition, ISBN 978-0801854149, 1996.</td>
    </tr>
    <tr>
      <td valign=\"top\">[Tietze2002]</td>
      <td valign=\"top\">U. Tietze and C. Schenk,
        <em>Halbleiter-Schaltungstechnik</em>,
        Springer Verlag, 12. Auflage, ISBN 978-3540428497, 2002.</td>
    </tr>
    <tr>
      <td valign=\"top\">[Walther2002]</td>
      <td valign=\"top\">N. Walther,
        \"Praxisgerechte Modelica-Bibliothek f&uuml;r Abtastregler\",
        Master's thesis (in German), HTWK Leipzig, Fachbereich Elektro- und Informationstechnik, 2002.</td>
    </tr>
</table>
&nbsp;
</html>"));
  end Literature;

  package ReleaseNotes "Release notes"
    class Version_2_5_0 "Version 2.5.0-dev (???, 2020)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>
This version requires the <strong>Modelica 4.0.0</strong> Library.
There is a&nbsp;limited backward compatibility to the previous version 2.4.1.
</p>

<h4>
Obsolete operator record Modelica_LinearSystems2.Math.Complex
</h4>
<p>
The functionality of this record is given by the top-level operator
record <a href=\"modelica://Complex\">Complex</a> now and
most of the functions can be found in the library 
<a href=\"modelica://Modelica.ComplexMath\">Modelica.ComplexMath</a>.
The remaining functions contained in this record where moved into
<a href=\"modelica://Modelica_LinearSystems2.ComplexMathAdds\">ComplexMathAdds</a>.
</p>
<p>
Therefore, the record <code>Modelica_LinearSystems2.Math.Complex</code>
was marked obsolete and shall not be used anymore.
The provided conversion script ensures proper transformation
of the record and its functions.
The record will be removed from the Library in the future.
</p>
<p>
See also 
<a href=\"modelica://Modelica_LinearSystems2.UsersGuide.GettingStarted.ComplexNumbers\">UsersGuide.GettingStarted.ComplexNumbers</a>
for some details and
<a href=\"modelica://Modelica_LinearSystems2.Math.Complex\">Modelica_LinearSystems2.Math.Complex</a>
for inheritance.
</p>

<h4>
Obsolete classes
</h4>
<p>
The following classes are obsolete and will be removed from the Library
in the future. A&nbsp;conversion script is provided to facilitate
the conversion.
</p>

<ul>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgecon</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgees</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgeev_eigenValues</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgeevx</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgehrd</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgelsx</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgesdd</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgesvd</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dgesvx</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dggev</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dggevx</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dhgeqz</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dlange</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dorghr</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dorgqr</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dormhr</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dormqr</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dtrevc</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dtrsen</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dtrsyl</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dpotrf</li>
  <li>Modelica_LinearSystems2.Math.Matrices.LAPACK.dtrsm</li>
</ul>
</html>"));
    end Version_2_5_0;

    class Version_2_4_1 "Version 2.4.1 (October 29, 2021)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>
This version requires the <strong>Modelica 4.0.0</strong> Library.
It is backward compatible to the previous version 2.4.0.
</p>

<h4>
Improvements in this version
</h4>

<ul>
  <li> Utilize ModelicaIO functions for matrix I/O, see issue
       <a href=\"https://github.com/modelica/Modelica_LinearSystems2/issues/34\">#34</a>.
       Concerning functions are marked obsolete, see below.
       </li>
  <li> Use functions from DymolaCommands library instead of Dymola's build-in functions,
       see issue <a href=\"https://github.com/modelica/Modelica_LinearSystems2/issues/66\">#66</a>.
       </li>
  <li> Disable an assert causing function crash in
       <a href=\"modelica://Modelica_LinearSystems2.Utilities.Import.rootLocusOfModel\">Utilities.Import.rootLocusOfModel</a>,
       see issue <a href=\"https://github.com/modelica/Modelica_LinearSystems2/issues/130\">#130</a>.
       </li>
  <li> Over <a href=\"modelica://Modelica_LinearSystems2/Resources/Documentation/Version-2.4.1/ResolvedGitHubIssues.html\">20</a>
       issues (including pull requests) have been addressed for this release.
       </li>
</ul>


<h4>
Obsolete classes
</h4>
<p>
The following classes are obsolete and will be removed from the Library
in the future.
</p>

<ul>
<li> Modelica_LinearSystems2.Math.Matrices.cholesky</li>
<li> Modelica_LinearSystems2.Math.Matrices.conditionNumber</li>
<li> Modelica_LinearSystems2.Math.Matrices.det</li>
<li> Modelica_LinearSystems2.Math.Matrices.fliplr</li>
<li> Modelica_LinearSystems2.Math.Matrices.flipud</li>
<li> Modelica_LinearSystems2.Math.Matrices.hessenberg</li>
<li> Modelica_LinearSystems2.Math.Matrices.leastSquares2</li>
<li> Modelica_LinearSystems2.Math.Matrices.LU</li>
<li> Modelica_LinearSystems2.Math.Matrices.LU_solve</li>
<li> Modelica_LinearSystems2.Math.Matrices.LU_solve2</li>
<li> Modelica_LinearSystems2.Math.Matrices.toUpperHessenberg</li>
<li> Modelica_LinearSystems2.Math.Matrices.norm</li>
<li> Modelica_LinearSystems2.Math.Matrices.nullspace</li>
<li> Modelica_LinearSystems2.Math.Matrices.rsf2</li>
<li> Modelica_LinearSystems2.Math.Matrices.solve</li>
<li> Modelica_LinearSystems2.Math.Matrices.solve2</li>
<li> Modelica_LinearSystems2.Math.Matrices.trace</li>
<li> Modelica_LinearSystems2.Math.Matrices.Internal.readMatrixGain</li>
<li> Modelica_LinearSystems2.Math.Vectors.find</li>
<li> Modelica_LinearSystems2.Math.Vectors.length</li>
<li> Modelica_LinearSystems2.Internal.Streams.readMatrixInternal</li>
<li> Modelica_LinearSystems2.Internal.Streams.readMatrixOnFileSize</li>
<li> Modelica_LinearSystems2.Types &ndash; use types from
     <a href=\"modelica://Modelica_LinearSystems2.Utilities.Types\">Modelica_LinearSystems2.Utilities.Types</a>
     instead</li>
</ul>
</html>"));
    end Version_2_4_1;


    class Version_2_4_0 "Version 2.4.0 (June 26, 2020)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>This version requires the <strong>Modelica 4.0.0</strong> Library.
It is <strong>backward compatible</strong> to the previous version 2.3.5.</p>

<h4>
Improvements in this version:
</h4>

<ul>
<li> Updated to be compatible with Modelica 4.0.0</li>
<li> Functions for vectors&apos; and matrices&apos; manipulations from
     <a href=\"modelica://Modelica.Math\">Modelica.Math</a>
     used prior to own functions from
     <a href=\"modelica://Modelica_LinearSystems2.Math.Vectors\">Vectors</a> and
     <a href=\"modelica://Modelica_LinearSystems2.Math.Matrices\">Matrices</a>
     where possible.
     Concerning functions are marked obsolete.
     See Git-issue
     <a href=\"https://github.com/modelica/Modelica_LinearSystems2/issues/74\">#74</a>.</li>
</ul>
</html>"));
    end Version_2_4_0;

    class Version_2_3_5 "Version 2.3.5 (March 20, 2019)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>This version requires the <strong>Modelica 3.2.3</strong> Library.
It is <strong>backward compatible</strong> to the previous version 2.3.4.</p>

<h4>
Improvements in this version:
</h4>

<ul>
<li> Updated to be compatible with Modelica 3.2.3</li>
<li> Dymola-specific parameter annotations start with prefix &quot;__Dymola_&quot;</li>
<li> Git-issue <a href=\"https://github.com/modelica/Modelica_LinearSystems2/issues/13\">#13</a>:
     Package Types moved into
     <a href=\"modelica://Modelica_LinearSystems2.Utilities.Types\">Utilities</a>
     package</li>
<li> Deleted obsolete package Examples.Utilities</li>
</ul>


<h4>
Bug fixes performed in this version:
</h4>

<ul>
<li> Fixed Git-issue <a href=\"https://github.com/modelica/Modelica_LinearSystems2/issues/44\">#44</a>:
     Incorrect Bode plot for MIMO systems</li>
</ul>
</html>"));
    end Version_2_3_5;

    class Version_2_3_4 "Version 2.3.4 (March 11, 2016)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>This version requires the <strong>Modelica 3.2.2</strong> Library.
It is <strong>backward compatible</strong> to the previous version 2.3.3.</p>

<h4>
Improvements in this version:
</h4>

<ul>
<li> New functions in Modelica_LinearSystems2.Utilities.Plot to read FFT results from file and plot them
     (e.g. from <a href=\"modelica://Modelica.Math.FastFourierTransform.Examples.RealFFT1\">Modelica.Math.FastFourierTransform.Examples.RealFFT1</a>):<br>
     <a href=\"modelica://Modelica_LinearSystems2.Utilities.Plot.plot_FFT_fromFile\">plot_FFT_fromFile</a><br>
     <a href=\"modelica://Modelica_LinearSystems2.Utilities.Plot.plot_FFTs_from_directory\">plot_FFTs_from_directory</a><br>
     <a href=\"modelica://Modelica_LinearSystems2.Utilities.Plot.plot_FFTs_of_model\">plot_FFTs_of_model</a>
     </li>

<li> Improved log output (by logging the full path name and not only the given file name) for:<br>
     StateSpace.Import.fromFile<br>
     Internal.StateSpace2.Import.fromFile<br>
     DiscreteStateSpace.Import.fromFile</li>

<li> Improved documentation of DiscreteStateSpace.Import.fromFile</li>

<li> HTML formatting of tables improved (left justifed instead of right justified, margins above and below)</li>
</ul>


<h4>
Bug fixes performed in this version:
</h4>

<ul>
<li> FilterFIR: Removed if-condition of a parameter declaration (not possible to disable a parameter declaration in Modelica)</li>
<li> Removed wrong C++ comment in Modelica_LinearSystems2.Internal.Streams.readMatrixInternal.</li>
<li> Minor issues correct so that Dymola 2017 Beta.1 checkes successfully with pedantic flag:<br>
     import statements corrected<br>
     wrong Diagram annotations changed to Dialog annotations<br>
     non-standard annotation \"translateModel\" changed to \"__Dymola_translateModel\"
</li>
</ul>
</html>"));
    end Version_2_3_4;

    class Version_2_3_3 "Version 2.3.3 (Sept. 8, 2015)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>This version requires the <strong>Modelica 3.2.1</strong> Library.
It is <strong>backward compatible</strong> to the previous version 2.3.2</p>

<h4>
Improvements performed in version 2.3.3 Build 1 (Sept. 8, 2015):
</h4>

<ul>
<li> New function StateSpace.Transformation.<strong>toBalancedForm</strong><br>
     Performs a similarity transformation to a balanced form of the
     linear system. The goal is to find state so that further numerical computations
     on the system are more reliable.</li>

<li> Improved functions<br>
     &nbsp;&nbsp;&nbsp;<strong>ModelAnalysis.Poles</strong><br>
     &nbsp;&nbsp;&nbsp;<strong>ModelAnalysis.Zeros</strong><br>
     &nbsp;&nbsp;&nbsp;StateSpace.<strong>Plot.polesAndZeros</strong><br>
     System is now balanced, before eigenvalues and transmission zeros are computed
     (to improve numerics for systems with largely varying zeros and poles).<br>
     By default, the poles/zeros are also printed to the output window (and not only plotted)</li>

<li> Improved functions<br>
     &nbsp;&nbsp;&nbsp;StateSpace.<strong>Plot.bodeSISO</strong><br>
     &nbsp;&nbsp;&nbsp;StateSpace.<strong>Plot.bodeMIMO</strong><br>
     System is now balanced, before bode plot is computed
     (to improve numerics for systems with largely varying zeros and poles).<br>
     The computation of the bode plot is now 1-2 orders of magnitudes faster
     for large systems (the implementation of the algorithm was restructured
     and part of the restructured functionality is now pre-compiled in object
     code using the __Dymola_translate=true annotation<br>
     Optionally, it is now possible to store the frequency, magnitude and angle
     vectors of the bode diagram on file </li>

<li> Improved function: ModelAnalysis.FullAnalysis<br>
     If the system is too large (> 50 states, inputs, or outputs), then the
     system is not printed to the output.<br>
     The step response is included as png-file in the html log file
     systemReport.html (if several plots are generated, only the last one is
     currently stored on file (needs to be improved in the future).</li>
</ul>


<h4>
Bug fixes performed in version 2.3.3 Build 1 (Sept. 8, 2015):
</h4>

<ul>
<li> StateSpace.<strong>Plot.bodeSISO</strong><br>
     StateSpace.<strong>Plot.bodeMIMO</strong><br>
     ZerosAndPoles.<strong>Plot.bode</strong><br>
     Defining logX=false, still computed the frequency vector in logarithmic scale
     (and f_min=0 gave an error). This has been fixed.<br>
     If a system had many zeros and poles with large absolute values,
     an overflow could occur. The algorithm has been changed to make
     this situation much more unlikely.</li>

<li> Minor bugs fixed (due to stricter checking of Dymola 2016 FD01, warnings had been
     present that protected variables in functions have the input/output attributes;
     these wrong attributes have been removed.</li>

<li> The following functions are not correct Modelica because local and result arrays depend
     on dimensions defined locally (but must be from inputs or parameter expressions).
     Since this is not practical to fix, the Dymola specific annotation
     __Dymola_allowForSize=true was introduced in Dymola 2016 FD01
     to allow relaxed rules for Modelica dimension definition:<br>
     &nbsp;&nbsp;&nbsp;StateSpace.Import.fromFile<br>
     &nbsp;&nbsp;&nbsp;StateSpace.Import.fromModel<br>
     &nbsp;&nbsp;&nbsp;Internal.StateSpace2.Import.fromFile<br>
     &nbsp;&nbsp;&nbsp;DiscreteStateSpace.Import.fromFile<br>
     &nbsp;&nbsp;&nbsp;DiscreteStateSpace.Import.fromModel
</li>

</ul>


</html>"));
    end Version_2_3_3;
    extends Modelica.Icons.ReleaseNotes;

    class Version_2_3_2 "Version 2.3.2 (April 17, 2015)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>This version requires the <strong>Modelica 3.2.1</strong> Library.
It is is <strong>backward compatible</strong> to the previous version 2.3.1</p>


<h4>
Improvements performed in version 2.3.2 Build 1 (Sept. 11, 2014):
</h4>

<ul>
<li> All Bode diagrams (in all representation forms) can be optionally
     plotted as magnitude in dB over angular frequency in rad/s,
     instead of the default to use magnitude over frequency in Hz.</li>
</ul>


<h4>
Bug fixes performed in version 2.3.2 Build 1 (Sept. 11, 2014):
</h4>

<ul>
<li> Modelica_LinearSystems2.StateSpace.Conversion.toZerosAndPoles:<br>
     When computing the gain of the ZerosAndPoles object, a better
     algorithm is used (the previous one could give bad results if there
     are large zeros or poles with positive Re-values).</li>
<li> Modelica_LinearSystems2.Controller.Interfaces.PartialSampledBlock,<br>
     Modelica_LinearSystems2.Controller.Interfaces.PartialDiscreteBlock,<br>
     Modelica_LinearSystems2.Controller.Internal.DiscreteStateSpace,<br>
     Modelica_LinearSystems2.Controller.Internal.DiscreteStateSpace2:<br>
     Enumeration1/Enumeration2 errors corrected (issued as warning
     due to stricter checking by Dymola 2015 FD01).</li>
<li> Some Enumeration/Integer errors corrected (issued as warning
     due to stricter checking by Dymola 2015 FD01).</li>
<li> Some Plot functions have been called without providing record input arguments.
     This has been fixed by providing a default record in the function definitions.</li>

</ul>


<h4>
Bug fixes performed in version 2.3.2 Build 2 (April 17, 2015):
</h4>

<ul>
<li> Several functions had used the input/output attribute in a protected declaration.
     Due to stricter checking by Dymola 2016, this is reported as warning.
     These wrong attributes have been removed.</li>

<li> ModelAnalysis.FullAnalysis<br>
     If the system is too large (> 50 states, inputs, or outputs), then the
     system is not printed to the output (previously, the tool \"hangs\" if printing a
     too large system).</li>

<li> ModelAnalysis.FullAnalysis<br>
     The step response is included as png-file in the html log file
     systemReport.html.</li>

<li> ModelAnalysis.Poles and ModelAnalysis.Zeros:<br>
     Besides plotted, the poles/zeros are also printed to the output window.</li>
</ul>


</html>"));
    end Version_2_3_2;

    class Version_2_3_1 "Version 2.3.1 (Oct. 1, 2013)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>This version requires the <strong>Modelica 3.2.1</strong> Library.
It is is <strong>backward compatible</strong> to the previous version 2.3.</p>


<h4>
Improvements and bug fixes performed in version 2.3.1 Build 1 (Oct. 1, 2013):
</h4>

<ul>
<li> Uses annotation changed to Modelica 3.2.1. </li>

<li> Modelica_LinearSystems2.Controller.Internal.DiscreteFIR:<br>
     Modelica_LinearSystems2.Controller.Internal.DiscreteStateSpace<br>
     Modelica_LinearSystems2.Controller.Internal.DiscreteStateSpace2<br>
     Modelica_LinearSystems2.Controller.Internal.DiscreteInterpolator:<br>
     According to the improved/corrected rules for initialization in
     Modelica Specification 3.2 rev. 2, the initialization in these models
     were overconstrained. Removed the (consistently) overconstrained
     initial conditions.</li>

<li> Modelica_LinearSystems2.StateSpace.Analysis.analysis:<br>
     If the system had only real eigen values and poles/zeros should be plotted,
     then this plot was not generated. This has been fixed.</li>

<li> Modelica_LinearSystems2.Controller.Interfaces.PartialSampledBlock,<br>
     Modelica_LinearSystems2.Controller.Interfaces.PartialSISO_equality,<br>
     Modelica_LinearSystems2.Controller.Noise,<br>
     Modelica_LinearSystems2.Controller.Interpolator:<br>
     Parameters have been defined conditionally leading to not strict
     Modelica models.
     The if-clauses have been removed.</li>

<li> Wrong annotation \"preferedView\" replaced by correct
     \"preferredView\" annotation. (3 times)</li>

<li> Non-standardized annotation \"Hide\" replaced by standardized
     annotation \"HideResult\" (77 times)</li>

<li> Non-standardized annotation \"__Dymola_checkBox\" replaced by standardized
     annotation \"checkBox\" (53 times)</li>

<li> Non-standardized annotation \"NumberOfIntervals\" replaced by
     tool specific annotation \"__Dymola_NumberOfIntervals\" (3 times)</li>

<li> Non-standardized annotation \"Commands\" replaced by
     tool specific annotation \"__Dymola_Commands\" (3 times)</li>

<li> Obsolete Dymola specific annotation \"__Dymola_treeView\" removed (3 times)</li>

<li> Old \"extend\" annotation code that has been present at a few places, has been removed.</li>
</ul>

</html>"));
    end Version_2_3_1;

    class Version_2_3 "Version 2.3 (August 30, 2012)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>
This release is <strong>backward compatible</strong> to the previous version 2.2.
It contains the following main improvements (and several minor ones):
</p>

<ul>
<li> New package \"Modelica_LinearSystems2.ModelAnalysis\"
     that contains several functions to linearize
     a model and perform a selected linear analysis operation, like
     plotting of poles, zeros or transfer functions.
     This allows a user to conveniently utilize the analyis
     functions by basically only providing the name of a
     Modelica model.<br></li>
<li> New plot functions in package \"Modelica_LinearSystems2.Utilities.Plot\"
     to plot parameterized curvces, as well as to plot
     a root locus of a model, by linearizing a model for a set of selected
     parameter values.<br></li>
<li> A new function \"Modelica_LinearSystems2.Utilities.Import.linearize2\"
     to (a) set parameters of a model, (b) linearize the model
     and (c) return a StateSpace object (the existing Import.linearize function
     does only allow to linearize around the default parameter settings and the
     function returns the A,B,C,D matrices and therefore it is not possible to
     utilize directly the many functions operating on StateSpace objects).<br></li>
<li> The layout of the output of function Modelica_LinearSystems2.StateSpace.Analysis.analysis
     has been improved.<br></li>
<li> The analysis functions have been corrected, so that they do not trigger an
     error, if inputs or outputs are not present. Instead, analysis operations
     that require inputs and/or outputs are not executed.</li>
</ul>

<p>
For <strong>versionBuild=4</strong> (March 25, 2013), several bug fixes have been performed. In particular:
</p>

<ul>
<li> Several issues with limiting cases (no states and/or no inputs and/or no outputs) have been fixed for the
     analysis functions (#1050, #1051, #1052).</li>
<li> Some wrong Modelica constructs regarding the \"operator\" language keyword have been fixed
     (#908, #909). </li>
<li> Improved and corrected the algorithm to compute invariant zeros, so that large zeros are treated as \"infinite\"
     (and are therefore removed). Hereby also corrected an error that set infinite zeros to \"zero\" (and not
     to \"infinite\"), resulting in a wrong system description.
     As a result the conversion from a StateSpace to a ZerosAndPoles
     object is corrected/improved, in case large zeros are present.</li>
<li> Improved efficiency of some analysis functions so that unnecessary translations of
     models are removed (and the previous translated model is utilized again).</li>
<li> Fixed error in Modelica_LinearSystems2.Examples.StateSpace.designKalmanFilter since
     design matrices Q and R had been declared with fixed dimensions that run only for the
     default example case.</li>
<li> Improved numerical efficiency and reliability for StateSpace.Plot.BodeMIMO
     (originally, the state space system was transformed to a zeros and poles
     object then to a transfer function and then the Bode plot of the transfer
     function was generated. This was changed to only transform to a zeros and poles
     object and plot the Bode plot of this object).</li>
<li> Corrected minor bug in Modelica_LinearSystems2.ZerosAndPoles.Analysis.evaluate
     that resulted in some cases in a wrong division by zero.</li>
<li> Fixed bug in isControllableSISO and isDetectableSISO
     (if all eigenvalues are controllable or observable, the eigenvalue LAPACK function was
     called with a (0,0) matrix resulting in an error).</li>
</ul>
</html>"));
    end Version_2_3;

    class Version_2_2 "Version 2.2 (October 27, 2010)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>
This release is <strong>backward compatible</strong> to the previous version 2.1.
It contains the following improvements:
</p>

<p>
New functions/records:
</p>

<ul>
<li> Records  <a href=\"modelica://Modelica_LinearSystems2.DiscreteZerosAndPoles\">DiscreteZerosAndPole</a>
     and  <a href=\"modelica://Modelica_LinearSystems2.DiscreteTransferFunction\">DiscreteTransferFunction</a>
     to operate with discrete zeros-and-poles-transfer-functions and transfer functions.</li>

<li> Constructors and basic operators for  <a href=\"modelica://Modelica_LinearSystems2.DiscreteStateSpace\">DiscreteStateSpace</a>,
     <a href=\"modelica://Modelica_LinearSystems2.DiscreteZerosAndPoles\">DiscreteZerosAndPole</a> and
     <a href=\"modelica://Modelica_LinearSystems2.DiscreteTransferFunction\">DiscreteTransferFunction</a>.</li>

<li> Functions to construct, to convert, to analyze, and to plot for records DiscreteStateSpace, DiscreteTransferFunction and DiscreteZerosAndPoles are provided.</li>

<li> Examples for DiscreteStateSpace, DiscreteTransferFunction and DiscreteZerosAndPoles demonstarate the discrete system records
     ( <a href=\"modelica://Modelica_LinearSystems2.Examples.DiscreteStateSpace\">Examples_DiscreteStateSpace</a>,
       <a href=\"modelica://Modelica_LinearSystems2.Examples.DiscreteZerosAndPoles\">Examples_DiscreteZerosAndPoles</a>,
       <a href=\"modelica://Modelica_LinearSystems2.Examples.DiscreteTransferFunction\">Examples_DiscreteTransferFunction</a>,).</li>
</ul>
</html>"));
    end Version_2_2;

    class Version_2_1 "Version 2.1 (January 15, 2010)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>
This release is <strong>backward compatible</strong> to the previous version 2.0.
It contains the following improvements:
</p>

<p>
New functions/blocks:
</p>

<ul>
<li> Function  <a href=\"modelica://Modelica_LinearSystems2.Math.Matrices.sylvester\">sylvester</a>
     to solve Sylvester equations \"<strong>A</strong>*<strong>X</strong> + <strong>X</strong>*<strong>B</strong> = <strong>C</strong>\"
     using a Schur method.</li>

<li> Function  <a href=\"modelica://Modelica_LinearSystems2.Math.Matrices.nullspace\">nullspace</a>
     to calculate the orthogonal nullspace and the dimension (nullity) of
     the nullspace of a matrix.</li>

<li> Functions <a href=\"modelica://Modelica_LinearSystems2.Math.Matrices.conditionNumber\">conditionNumber</a>
     and <a href=\"modelica://Modelica_LinearSystems2.Math.Matrices.rcond\">rcond</a>
     to calculate the condition number and the reciprocal condition number of a
     matrix respectively.</li>

<li> Block <a href=\"modelica://Modelica_LinearSystems2.Controller.Interpolator\">Controller.Interpolator</a>
     to increase the sampling frequency with linear interpolation and optional mean-value filtering.</li>

<li> Blocks have been added to Controller.Examples to demonstrate the discretization methods
     (<a href=\"modelica://Modelica_LinearSystems2.Controller.Examples.Discretization1\">Discretization1</a>,
      <a href=\"modelica://Modelica_LinearSystems2.Controller.Examples.Discretization2\">Discretization2</a>,
      <a href=\"modelica://Modelica_LinearSystems2.Controller.Examples.Discretization1\">DiscretizationSeries</a>)
     and the new Interpolator block
     (<a href=\"modelica://Modelica_LinearSystems2.Controller.Examples.Interpolator\">Interpolator</a>).</li>
</ul>

<p>
Other improvements:
</p>
<ul>
<li> The instance name is now displayed above the icon of every Controller block.</li>
<li> The sample factor is now displayed in the icon of every Controller block.</li>
<li> Access to resources (e.g. image files) has been changed from file names to URIs.</li>
<li> The sequence of pole shifting in poleAssignmentMI has beeen changed.</li>
<li> Bode diagrams of state space systems are now based on numerical more reliable zeros and poles representation istead of on transfer functions.</li>
</ul>

<p>
Bug fixes:
</p>

<ul>
<li>Redundant results for initial responses of multi input state space systems have been fixed.</li>
<li>Several functions have been modified to work (or to terminate correctly) for state space system without in- and/or outputs:
<ul>
<li><a href=\"modelica://Modelica_LinearSystems2.StateSpace.Analysis.analysis\">Analysis.analysis</a></li>
<li><a href=\"modelica://Modelica_LinearSystems2.StateSpace.Analysis.invariantZeros\">Analysis.invariantZeros.</a></li>
<li> Check for controllability and observability.</li>
<li> Staircase algorithm to reduce a system to controller Hessenberg form.</li>
<li> Computation of controllable/uncontrollable poles.</li>
</ul></li>
<li> The design of FIR filters in block <a href=\"modelica://Modelica_LinearSystems2.Controller.FilterFIR\">Controller.FilterFIR</a> was
disabled. It is now enabled and the previously wrong design of highpass filters with odd order
was corrected, by increasing the order by one in this case.</li>
</ul>
</html>"));
    end Version_2_1;

    class Version_2_0 "Version 2.0 (September 2, 2009)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>
This is a new library. It is based on library Modelica_LinearSystems2 (version 0.95)
but is not backwards compatible to this library due to many changes (e.g. the system
data structures include strings for signals names whereas the 0.95 version does not
have these names in the records). Most important improvements with respect to version 0.95:
</p>

<ul>
<li> The library has been extended and contains now about 180 functions and a lot of examples for the analysis and design of linear control systems in different description forms.</li>
<li> The library has been restructured and the functions are now organized in sub packages.</li>
<li>  Documentation has been upgraded and improved.</li>
<li>  Operator overloading concept has been fully utilized.</li>
<li>  Analysis functions like tests for controllability, observability, stabilizability, and detectability have been added.</li>
<li>      The analyse-function to determine the characteristic of a system and to analyse the relation of the system states to the dynamics of the uncoupled modal states is provided.</li>
<li>      Calculation of invariant zeros for arbitrary systems (i.e. systems with different numbers of inputs and outputs) is now provided.</li>
<li>      The Design package contains functions for controller design, i.e. pole assignment, LQ controller, Kalman Filter, and LQG controller.</li>
<li>      Since the design of optimal controllers is based on the solution of algebraic Riccati equation, a solver for those equations is provided in Math.Matrices. Also an algorithm to solve Lyapunov equations has been added.</li>
<li>      The package Sampled was renamed to Controller. All blocks are now available in a discrete representation,
          especially also the \"Filter\" block (was only available in a continuous representation in 0.95)</li>
<li>      The Controller package contains a sub package Template which provides standard controller structures (e.g. a state-feedback-control-structure and a two degree of freedom controller template with an inverse system model in the feed forward loop) with replaceable components.</li>
<li>      The besselFilter coefficients have been recalculated with high precision calculation up to order 41.</li>
<li>      LimPID, comprising P, PI, PD, and PID controller with limited output, anti-windup compensation and input weighting (setpoint and measured value) added.</li>
<li>      Improved new generic plot functions are used for time and frequency plots.</li>
<li> New system transformations (similarity transformation, canonical forms).</li>
<li> New transformations between system descriptions added, especially from
     ZerosAndPoles to StateSpace and from TransferFunction to StateSpace.</li>
<li> Generate condensed forms like Hessenberg description </li>
<li> Controllability/Observability forms</li>
<li> Time response with plot (step, ramp, impulse)</li>
<li> Bode plots improved, since the transformation from StateSpace to ZerosAndPoles
     uses a better algorithm from the newest LAPACK version.</li>
<li> Based on a newer LAPACK version 3.1.1.</li>
</ul>
</html>"));
    end Version_2_0;

    class Version_0_95 "Version 0.95 (Feb. 11, 2008)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>

<p>
Adapted the library to the Modelica Standard Library 3.0 and
to the new restrictions of the Modelica Language Version 3.0.
</p>
</html>"));
    end Version_0_95;

    class Version_0_93 "Version 0.93 (Feb. 11, 2008)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>

<p>
The following new components have been added:
</p>

<table border=\"1\" cellspacing=0 cellpadding=2 style=\"border-collapse:collapse;\">
  <tr><td colspan=\"2\"><strong>Modelica_LinearSystems2.StateSpace.</strong></td></tr>
  <tr><td valign=\"top\"> plotBodeMIMO </td>
      <td valign=\"top\"> Plot bode plot of all transfer functions of a state space system.</td>
  </tr>

  <tr><td valign=\"top\"> plotBodeSISO </td>
      <td valign=\"top\"> Plot bode plot of transfer function from input iu to output iy
                        of a state space system.</td>
  </tr>

  <tr><td colspan=\"2\"><strong>Modelica_LinearSystems2.StateSpace.Examples.</strong></td></tr>
  <tr><td valign=\"top\"> bodePlotMIMO<br>
                        bodePlotSISO </td>
      <td valign=\"top\"> Demonstrate the new Bode plot possibilities.</td>
  </tr>

  <tr><td colspan=\"2\"><strong>Modelica_LinearSystems2.TransferFunction.</strong></td></tr>
  <tr><td valign=\"top\"> fromStateSpaceSISO<br>
                        fromStateSpaceMIMO </td>
      <td valign=\"top\"> Generate transfer functions of a state space system.</td>
  </tr>

  <tr><td colspan=\"2\"><strong>Modelica_LinearSystems2.ZerosAndPoles.</strong></td></tr>
  <tr><td valign=\"top\"> fromStateSpaceSISO<br>
                        fromStateSpaceMIMO </td>
      <td valign=\"top\"> Generate ZerosAndPoles from a state space system.</td>
  </tr>

</table>
</html>"));
    end Version_0_93;

    class Version_0_9 "Version 0.9 (Oct. 17, 2005)"
      extends Modelica.Icons.ReleaseNotes;

      annotation (Documentation(info="<html>
<p>
First Beta-Version of the library.
</p>
<p>
The Modelica_LinearSystems2.Controller library (previously called Modelica_LinearSystems.Sampled) is based on the
Sampled library from Nico Walther (master thesis
from the electrical engineering at the HTWK-Leipzig,
supervised by Prof. M&uuml;ller, HTWK, and Prof. Martin Otter, DLR).
Based on the experience in using the Sampled library,
new features in Modelica as well as in Dymola,
the Sampled library was considerably restructured, and
newly implemented. The following main changes have been
performed:
</p>
<ul>
<li> The library is based on the input/output signal connectors
     of the Modelica standard library 2.1 (and higher). Previously,
     it was based on version 1.6. Similar as in 2.1, all blocks
     have been de-vectorized (more convenient for the user in the
     standard case. Modelica allows now easy vectorization of
     blocks).</li>
<li> The previous parameter \"method\" was split into \"blockType\" (continuous/discrete)
     and \"methodType\" (discretization method). It is therefore
     easier to switch between a continuous and a discrete representation because
     one does not have to remember which discretization method was used
     previously when switching from a continuous to a discrete representation.</li>
<li> The main options (blockType, methodType, sampleTime, initType) are set
     globally in component SampleClock via inner/outer and no longer in every
     component. The default defined in SampleClock can be changed in every
     component. Since in many cases just the defaults are used, it is now
     much more convenient to define the sampling setting and
     switch between different representations.</li>
<li> In every component, the Integer parameter sampleFactor is present that
     defines the sampling time of this component as a \"sampleFactor\"
     multiple of the base sample time defined in sampleClock.
     This allows a more easier definition of standard multi-rate
     systems (in the previous version, in every component the actual
     sample time had to be defined). In the future, more advanced
     sampling options might be added, e.g., via user definable
     trigger signals.</li>
<li> The previous Filter sublibrary was replaced by two components
     <strong>Filter</strong> and <strong>FilterFIR</strong> that model IIR and FIR filter.
     There are now more options for IIR filters (additional Bessel
     filter + normalized/non-normalized filters).</li>
<li> The previous NoiseGenerators sublibrary was replaced by
     component <strong>Noise</strong>. In most applications only this Noise
     component is needed in sampled data systems and not the other
     variants in the previous NoiseGenerator library. It is then
     easier for a user to just select this component and not
     be forced to first figure out what component to use.</li>
<li> The discrete representations of the blocks are changed such that
     no past values of the input signals u are accessed. For linear systems
     this is always possible via a state transformation. The benefit is
     that it is easier to initialize the block. Previously,
     it was necessary to define somehow the initial values of pre(u).
     This was not always made in a consistent way. Since in the new version
     no pre(u) is present, it need not be initialized.</li>
<li> The sampling definition was changed. Previously, some when clauses have been
     evaluated during initialization and via the sample() operator at the
     initial time again (i.e., the when block was evaluated twice at
     the start time). Some blocks have not been evaluated during initialization and
     therefore in some cases the discrete variables have been not properly
     initialized. In the new version, all when-clauses are active during
     initialization and they are evaluated again at the next sample time:
     <pre>
     <strong>when</strong> {<strong>initial</strong>(), <strong>sample</strong>(Ts,Ts)} <strong>then</strong>
         // active during initialization and at time = Ts, 2*Ts, 3*Ts, ...
       ...
     <strong>end when</strong>;
     </pre>
     Furthermore, parameter startTime was removed (= first sample time of
     when-clause after the initialization) since this is nearly never needed
     in a practical application and therefore this parameter could be
     removed (and no longer confuses users).</li>
<li> The continuous representations of all blocks are implemented such that
     as much struture as possible is preserved in order that index reduction
     is possible. For example, if a transfer function has more poles as
     zeros, then the output of the block might be differentiated n times
     (n = number of poles - number of zeros) without introducing derivatives
     in the inputs. A detailed explanation is given at the end of the info
     layer of component
     <a href=\"modelica://Modelica_LinearSystems2.Controller.ZerosAndPoles\">ZerosAndPoles</a>.
     Previously, transfer functions and especially filters did not have this
     feature. Therefore, it was not possible to use the filters of the previous
     Sampled library as pre-filters in an inverse model. This is now
     possible. In such a case, a Bessel filter is most appropriate, because
     it does not introduce osciallations as the Butterworth and Chebyhev
     filter do and it is faster as the critical damping filter, see the
     description of the <a href=\"modelica://Modelica_LinearSystems2.ZerosAndPoles.Design.filter\">filter</a>
     function. Previously, a Bessel filter was not supported.
     </li>
<li> Previously, blocks have been implement with a large if-clause in which
     the different representations have been defined. In the new version,
     the discrete representations are defined in a separate block that
     are activated via a conditional declaration, if the block is discrete.
     (conditional declarations have been only recently introduced into
     the Modelica language version 2.2). The benefit is that the implementation
     is simpler and that there is no longer any overhead for the continuous
     block (all equations and variables from the discrete representation
     are removed during translation).</li>
<li> Previously, for all simple blocks (such as FirstOrder) the different
     discrete representations have been specifially derived and implemented.
     In the new version, all blocks are first transformed to
     state space form with a function call and then the
     discrete state space system block is used for the discrete
     representation. This approach is less error prone and
     the implementation is much simpler.</li>
<li> Special data structures for linear systems have been introduced
     in form of records and accompanying functions operating on these
     records. As a result, also the input parameters of some blocks,
     such as StateSpace or TransferFunction are now records instead
     of arrays. It is then possible to generate such system representations
     by appropriate function calls and supply the result as record
     instance to the corresponding block.</li>
</ul>
</html>"));
    end Version_0_9;
    annotation (Documentation(info="<html>
<p>
This section summarizes the changes that have been performed
on the Modelica LinearSystems library.
</p>
</html>"));
  end ReleaseNotes;

  class Contact "Contact"
    extends Modelica.Icons.Contact;

    annotation (Documentation(info="<html>
<h4>Main Authors</h4>
<blockquote>
Martin Otter, Marcus Baur and Jakub Tobolar<br>
Deutsches Zentrum f&uuml;r Luft- und Raumfahrt (DLR)<br>
Institut f&uuml;r Systemdynamik und Regelungstechnik (SR)<br>
M&uuml;nchener Stra&szlig;e 20<br>
D-82234 We&szlig;ling<br>
Germany<br>
email: <a href=\"mailto:Martin.Otter@dlr.de\">Martin.Otter@dlr.de</a>
</blockquote>


<h4>Acknowledgements</h4>
<ul>
<li> Some functionality of Modelica_LinearSystems2 (e.g.,
     linearizing a Modelica model by
     Modelica_LinearSystems2.StateSpace.Import.fromModel)
     has been originally developed by Sven Erik Mattsson
     from Dynasim.</li>
<li> The Math.Complex, Math.Polynomial, and
     TransferFunction packages are based on
     proposals from Hilding Elmqvist, Dynasim, presented at
     the 33rd Modelica design meeting in Bielefeld (Nov. 2003) and
     the 37th Modelica design meeting in Lund (Jan. 2004).</li>
<li> Several functions of package Complex have been provided
     by Anton Haumer, who also performed a thorough
     test of the package. </li>
<li> The design of the records (such as Math.Complex and
     Math.Polynomial) has been inspired by the discussions
     about operator overloading at various Modelica design
     meetings.</li>
<li> Advice for implementation issues given by Hans Olsson
     from Dynasim, as well as advice for some numerical algorithms
     given by Andras Varga and Dieter Joos from DLR is appreciated.</li>
<li> Financial support of DLR for the development of this library within
     the European Network of Excellence HYCON (Hybrid Control: taming heterogeneity
     and complexity of networked embedded systems;
     contract number: 511368), and within the German BMBF Verbundprojekt
     PAPAS (Plug-And-Play Antriebs- und Steuerungskonzepte f&uuml;r
     die Produktion von Morgen; F&ouml;rderkennzeichen: 02PH2060) is
     highly appreciated.</li>
<li> In 2007 - 2010, the library development was partially funded by BMBF within the
     <a href=\"https://itea3.org/project/result/download/5521/EUROSYSLIB%20Project%20Leaflet.pdf\">ITEA2 EUROSYSLIB</a>
      project. </li>
</ul>
</html>"));
  end Contact;
  annotation (DocumentationClass=true, Documentation(info="<html>
<p>
Library <strong>Modelica_LinearSystems2</strong> is a Modelica package
providing different representations of linear, time invariant differential and
difference equation systems, as well as typical operations on these
system descriptions. Additionally, data structures and operations for
Complex numbers and for Polynomials are provided. These are utilized
above, but are, of course, also useful for other purposes.
</p>

<p>
This package contains the <strong>user's guide</strong> for
the library and has the following content:
</p>
<ol>
<li><a href=\"modelica://Modelica_LinearSystems2.UsersGuide.GettingStarted\">Getting started</a>
    contains an introduction to the most important features and how
    to use them at hand of examples.</li>
<li><a href=\"modelica://Modelica_LinearSystems2.UsersGuide.Requirements\">Requirements</a>
    scetches the requirements on a Modelica tool, in order that this library
    can be utilized.</li>
<li><a href=\"modelica://Modelica_LinearSystems2.UsersGuide.The3clauseBSDLicense\">3-clause BSD License</a>
    is the legal license text under which this library is submitted.</li>
<li><a href=\"modelica://Modelica_LinearSystems2.UsersGuide.Literature\">References</a>
    provides references that have been used to design and implement this
    library.</li>
<li><a href=\"modelica://Modelica_LinearSystems2.UsersGuide.ReleaseNotes\">Release Notes</a>
    summarizes the differences between different versions of this library.</li>
<li><a href=\"modelica://Modelica_LinearSystems2.UsersGuide.Contact\">Contact</a>
    provides information about the author of the library as well as
    acknowledgments.</li>
</ol>
</html>"));
end UsersGuide;
